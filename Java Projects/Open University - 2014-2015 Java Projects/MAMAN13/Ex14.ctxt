#BlueJ class context
comment0.params=m\ val
comment0.target=boolean\ findValWhat(int[][],\ int)
comment0.text=1\:findValWhat\:\r\n\ the\ method\ starts\ at\ the\ right\ upper\ corner\ of\ the\ array\r\n\ if\ the\ cell's\ int\ equals\ to\ val\ returns\ true,\ if\ not\ and\ it\ is\r\n\ bigger\ then\ val\ it\ goes\ left\ in\ the\ row.\ if\ its\ smaller\ then\ val\r\n\ it\ goes\ down\ in\ the\ column.\ if\ the\ loop\ reaches\ the\ borders\ of\ the\ array\r\n\ without\ finding\ val\ it\ returns\ false.\r\n\ @param\ m\ the\ 2d\ array\ that\ the\ method\ gets\ if\ what\ returns\ true\ on\ it\r\n\ @param\ val\ the\ int's\ searched\ in\ the\ array\r\n\ @return\ true\ if\ the\ method\ finds\ val\ in\ the\ array.\r\n
comment1.params=m\ val
comment1.target=boolean\ findValTest(int[][],\ int)
comment1.text=2\:findValTest\:\r\n\ the\ first\ loop\ runs\ all\ over\ the\ first\ column\ and\ checks\r\n\ if\ val\ is\ bigger\ or\ the\ same\ then\ the\ first\ cell\ in\ the\ first\ row\r\n\ and\ smaller\ or\ same(that\ will\ be\ for\ must\ if\ its\ equal\ to\ the\ first\ \r\n\ cell\ in\ the\ upper\ row\ because\ of\ "test-true"),\ if\ the\ loop\r\n\ "catches"\ this\ two\ rows\ it\ will\ run\ a\ loop\ inside\ them\ both\ to\r\n\ search\ for\ the\ value,\ and\ if\ its\ found\ it\ will\ return\ true.\r\n\ if\ it\ will\ not\ find\ the\ value\ in\ the\ rows\ it\ cought\ it\ will\ never\r\n\ find\ more\ rows\ so\ the\ inner\ loop\ will\ run\ maximum\ 2\ times.(no\ O(n^2))\!\r\n\ also\ there\ is\ another\ loop\ that\ is\ not\ depended\ that\ checks\r\n\ the\ last\ row\ that\ might\ be\ not\ checked.\r\n\ @param\ m\ the\ 2d\ array\ that\ the\ method\ gets\ if\ test\ returns\ true\ on\ it.\r\n\ @param\ val\ the\ int's\ searched\ in\ the\ array\r\n\ @return\ true\ if\ the\ method\ finds\ val\ in\ the\ array.\r\n
comment10.params=mat
comment10.target=int\ countPaths(int[][])
comment10.text=countPaths\:\ \r\n\ the\ recursive\ (backtracking)\ method\ returns\ the\ number\ of\ possible\r\n\ paths\ from\ the\ left\ upper\ cell\ in\ the\ 2d\ array\ inserted\ in\ it\ to\ the\r\n\ down\ right\ cell.\ each\ path\ countiues\ cell\ to\ cell\ by\ the\ number\ in\ it\r\n\ for\ example\ the\ cell\ has\ "15"-\ we\ can\ move\ 1\ in\ the\ rows\ and\ 5\ in\ columns\r\n\ or\ 1\ in\ columns\ and\ 5\ in\ the\ rows.\ the\ path\ cannot\ proceed\ the\ array\ borders.\r\n\ @param\ mat\ the\ 2d\ array\ inserted.\r\n\ @return\ the\ number\ of\ paths\ possible\ from\ the\ left\ upper\ cell\ to\ the\ right\ down\ cell.\r\n
comment11.params=mat\ x\ y
comment11.target=int\ countPaths(int[][],\ int,\ int)
comment2.params=a
comment2.target=int\ what(int[])
comment2.text=C\:what\:\r\n\ the\ method\ counts\ the\ number\ of\ even\ and\ odd\ numbers\ in\ the\ array\r\n\ the\ longest\ even\ sum\ is\ made\ of\ the\ sum\ of\ all\ the\ even\ numbers\r\n\ and\ the\ maximum\ even\ number\ of\ odd\ numbers\ in\ the\ array.\ that\ means-if\ the\ number\ of\ odd\ numbers\r\n\ is\ even\ we\ add\ it\ to\ the\ length\ of\ the\ sum.\ if\ it\ is\ odd-we\ remove\ 1\ from\ it\ and\ add\ it\ to\ the\ sum.\r\n\ @param\ a\ the\ 1d\ array\ that\ the\ method\ gets\r\n\ @return\ the\ length\ of\ the\ longest\ even\ sum\ possible\ in\ the\ array.\r\n
comment3.params=num\ digit
comment3.target=int\ weight(int,\ int)
comment3.text=1.weight\:\r\n\ the\ method\ checks\ what's\ the\ weight\ of\ the\ digit\ inserted\ in\ the\ num\ inserted\r\n\ that\ means-\ if\ the\ digit\ is\ in\ the\ "1"\ place\ (first\ time)\ it\ returns\ 1,\ "2"-10,\ "3"-100...\r\n\ @param\ num\ the\ positive\ int\ number\ inserted\r\n\ @param\ digit\ the\ digit\ inserted\ to\ find\ what\ its\ number\ in\ the\ parameter\ num.\r\n\ @return\ the\ weight\ of\ the\ digit\ in\ the\ first\ place\ in\ num\ it\ sees\ her.\r\n
comment4.params=num\ digit
comment4.target=int\ weightRec(int,\ int)
comment4.text=2.weightRec\:\r\n\ the\ recursive\!\ method\ checks\ what's\ the\ weight\ of\ the\ digit\ inserted\ in\ the\ num\ inserted\r\n\ that\ means-\ if\ the\ digit\ is\ in\ the\ "1"\ place\ (first\ time)\ it\ returns\ 1,\ "2"-10,\ "3"-100...\r\n\ @param\ num\ the\ positive\ int\ number\ inserted\r\n\ @param\ digit\ the\ digit\ inserted\ to\ find\ what\ its\ number\ in\ the\ parameter\ num.\r\n\ @return\ the\ weight\ of\ the\ digit\ in\ the\ first\ place\ in\ num\ it\ sees\ her.\r\n
comment5.params=num\ digit\ place
comment5.target=int\ weightRec(int,\ int,\ int)
comment6.params=num
comment6.target=int\ reverse(int)
comment6.text=3.reverse\:\r\n\ the\ method\ return\ an\ int\ paramter\ inserted\ in\ her\ in\ reverse.\r\n\ for\ example\ "9456"-\ input,\ "6549"-output.\r\n\ @param\ num\ the\ number\ inserted\ to\ be\ reversed.\r\n\ @return\ the\ reveresed\ number\ of\ the\ parameter\ num.\r\n
comment7.params=num
comment7.target=int\ reverseRec(int)
comment7.text=4.reverseRec\:\r\n\ the\ recursive\!\ method\ return\ an\ int\ paramter\ inserted\ in\ her\ in\ reverse.\r\n\ for\ example\ "9456"-\ input,\ "6549"-output.\r\n\ @param\ num\ the\ number\ inserted\ to\ be\ reversed.\r\n\ @return\ the\ reveresed\ number\ of\ the\ parameter\ num.\r\n
comment8.params=num\ pow
comment8.target=int\ reverseRec(int,\ int)
comment9.params=num\ pow\ reverse
comment9.target=int\ reverseRec(int,\ int,\ int)
numComments=12
